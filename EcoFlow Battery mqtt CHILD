/***
 ***********************  ECOFLOW DELTA PRO / DELTA 2  / RIVER SERIES MQTT HUBITAT CHILD DRIVER - ***************************************
 *               	 
 *  Driver has been tested on DeltaPro, Delta 2 and River Pro Batteries. 
 *  This driver is controlled by the ECOFLOW MQTT PARENT DRIVER. - It can not run on its own        	 
 *                     	 
 *  D. Dimond 03/13/2023
 *  Hubitat @daryl678
 *
 *  Design Usage:
 *  This driver is designed to control Ecowflow battery models Delta 2, Delta pro, and River.  
 *  The driver will create child switches based on the model. The Delta2: AC, DC, & USB. The Delta Pro: AC & DC. The River
 *  AC, DC, and LED light.
 *    
 *  	 
 *  
 *
 *************************************** Special Instructions for Broker Account ***********************************************
 *  A procedure is required to obtain your MQTT access keys. See GitHub folder for MQTT key instructions to obtain your MQTT   *
 *  keys. Or follow this link to grab the instructions:                                                                        *
 *  https://github.com/darryl678/darryl678/blob/Hubitat-EF-Delta-Driver/Accessing-EF-.docx                                     *
 *******************************************************************************************************************************           
 *   
 **************************************** Special Instructions for Adding Devices ***********************************************
 *         The Ecoflow Broker will not distrubute devices serial numbers so child devices can not be auto generated by the      *
 *          parent driver. Follow this instructions for setting up child devices.                                               *  
 *          1. Add broker account information and per the instructions above - get the  broker online                           *
 *          2. In the parent driver enter a friendly name for your drive - ex home, cabin, Sparky - Click Enter the Value       *
 *          3. Enter the Device's serial number - Click to enter the value                                                      * 
 *          4. Enter the device model number - no caps - no spaces - river - deltapro - delta2                                  *
 *          5. Click Add New Device                                                                                             *
 *          6  A child device will be created called "freindly name" "serial number" "model"                                    *
 *          7  Create as many child devices as you have EF units.                                                               *
 *          8. Open each child device and initalize the driver.                                                                 *     
 ********************************************************************************************************************************
 *
 *     To delete a child device - click confirm delete devcie to turn on delete modde - active for 60 seconds
 *                              - Enter the serial number (serial only) of the child to delete and click the tab
 *
 *     To delete all child devices - click confirm delete devcie to turn on delete modde - active for 60 seconds
 *                                   click Delete All Child Devices 
 *   
 *  
 *  Thank You(s)
 *  Mark H. - for helping me get mqtt explorer connected to my battery. That was the starting point.
 *  @shircliffs for giving me control of his Delta Pro to test functions and figure out variable names
 *  @steve101 for providing Delta Pro model parameters
 *  @ronv42 for providing River Parameters and driver path discussions
 *  @snell for always taking the time to give detailed responses to my never-ending coding questions.
 *
 * ------------------------------------------------------------------------------------------------------------------------------
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *
 *
 *  Changes: 3/13/23
 *	
 *
 */


import groovy.json.JsonSlurper;

metadata {
  definition(name: "EcoFlow Battery mqtt CHILD", namespace: "Ecoflow", author: "Darryl Dimond", importURL: "not listed") {
    capability "Initialize"
    capability "Actuator"
    capability "Battery"
    capability "PowerMeter"
    capability "TemperatureMeasurement"
    command "ACSwitchON"
    command "ACSwitchOFF"
    command "DCSwitchON"
    command "DCSwitchOFF"
    command "USBSwitchON"
    command "USBSwitchOFF"
    command "LEDSwitchON"
    command "LEDSwitchOFF"
    command "XBoostON"
    command "XBoostOFF"
    command "PowerUpAcON"
    command "PowerUpAcOFF"
    command "Disconnect"
    command "ManualRefreshData"
    command "LimitWattsCharging" , ["number"]
    command "LimitDischarge", ["number"]
    command "LimitCharge", ["number"]
    command "SmartGenAutoOFF" , ["number"]
    command "SmartGenAutoON", ["number"]
    command "LimitCarInput" , ["number"]
    command "TimeOutUnit" , ["number"]
    command "TimeOutScreen",["number"]
    command "TimeoutACOutput",["number"]
    command "TimeoutDCOutput",["number"]
    command "ResetEnergyCounts", ["number"]
    command "LEDControlBits0123", ["number"]

    attribute "Cycles on Master",  "number"
    attribute "Cycles on Slave",   "number"
    attribute "Output Status AC",  "number"
    attribute "Output Status DC",  "number"
    attribute "Output Status USB", "number"
    attribute "Output Status LED", "number"
    attribute "Output XBoost" ,    "number"
    attribute "Fault Code mppt",   "number"
    attribute "Fault Master Cell", "number"
    attribute "Fault Slave1 Cell",  "number"
    attribute "Fault Slave2 Cell",   "number"
    attribute "SOC Master Cell",     "number"
    attribute "SOC Slave1 Cell",     "number"
    attribute "SOC Slave2 Cell",     "number"
    attribute "Temp DC",             "number"
    attribute "Temp Mppt",           "number"
    attribute "Temp Master Cell",    "number"
    attribute "Temp Slave1 Cell",    "number"
    attribute "Temp Slave2 Cell",    "number"
    attribute "Temp Inverter Out",   "number"
    attribute "Temp Inverter In",    "number"
    attribute "Time Remain",         "number"
    attribute "Battery Status",      "string"
    attribute "Watts DC Out",        "number"
    attribute "Watts DC In",         "number"
    attribute "Watts AC In",         "number"
    attribute "Watts AC Out",        "number"
    attribute "Watts Slave1 In",      "number"
    attribute "Watts Slave1 Out",     "number"
    attribute "Watts Slave2 In",     "number"
    attribute "Watts Slave2 Out",    "number"
    attribute "Last Update",         "string"
    attribute "htmlTile1",           "string"
    attribute "htmlTile2",           "string"
    attribute "Limit Charging Rate", "number"
    attribute "Limit Discharge",     "number"
    attribute "Limit Charge" ,       "number"
    attribute "SmartGen Off Point",  "number"
    attribute "SmartGen On Point" ,  "number"   
    attribute "Limit CarCharge Amps","number"
    attribute "TimeOut Unit" ,       "number" 
    attribute "TimeOut Screen" ,     "number" 
    attribute "Timeout AC Output",   "number" 
    attribute "Timeout DC Output" ,  "number" 
    attribute "Slow Charge Enable",  "number"
    attribute "mqtt Status" ,        "string"
    attribute "Output AC Always" ,   "number"
    attribute "Energy AC in Total",  "numner"
    attribute "Energy AC out Total", "number"
    attribute "Energy DC in Total",  "number" 
    attribute "Energy DC out Total", "number"
    attribute "Energy Reset Timestamp", "string"
    attribute "payloadjson",         "string"
    attribute "dataupdate",          "number"
    }

  preferences {
    input name: "tempF", type: "text", title: "Temp in C or F:", description: "type C or F", required: true, displayDuringSetup: true, defaultValue: "C"
    input("logEnable", "bool", title: "Enable logging", required: true, defaultValue: true)
    //input(name: "htmlTemplate1", type: "string", title: "<b>Tile Template</b>", description: "<font size='2'>Ex: [b]Remaining Minutes:[/b] \${ remainMins }V[/br]</font>", defaultValue: "");
  }
}

def initialize() {
   log.info "Initialize()"
   state.firstrun = 0
   setupmqtt()
}

def installed() {
    initialize()
}

// Parse incoming device messages to generate events
def ProcessJSON (payload ) {
  def jsonSlurper = new JsonSlurper()
  def jsonpl = jsonSlurper.parseText(payload)
  if (logEnable) log.debug payload
  def jsonObject = new JsonSlurper().parseText(payload)
  if ( jsonpl.data.online == 1 ) {
    Date date = new Date();
      if (jsonpl.data.online == 0  ) {
        log.info "MQTT broker online but battery ${state.EFmodel} is offline"
        ProcessEvent( "Battery Status",  "Battery Offline!", null, true )
        ProcessEvent( "mqtt Status",  "MQTT Online - Battery OFFLINE", null, true )
      }else{
        ProcessEvent( "mqtt Status",  "Online", null, true )
       // scan through each JSON point - Process data
        jsonpl.data.quotaMap.each {
          if (state."${ it.key }" != it.value) {
            oldstatevar = state."${ it.key }"
            state."${ it.key }" = it.value // load all the state values for display in device states
              if (oldstatevar != null && logEnable ) log.info "Battery variable>>" + it.key + "<< old value:* " + oldstatevar + " NEW VALUE: *** " + it.value  //flag battery variable changes to info log
          } 
        }
        def fullname = device.getName()
        def values = fullname.split()
        state.EFmodel = values[2]
        state.serial = values[1]
        log.info "Updating " + state.EFmodel + " Data"
        if (state.firstrun == null) state.firstrun = 0
          if (state.firstrun == 0)   {
          setupmqtt()
          state.firstrun = 1
        }                  
        if (settings.tempF == "F") { //check if temp request is C or F
          mul = 9 / 5
          adder = 32
          tunit = "F"
        } else {
          mul = 1
          adder = 0
          tunit = "C"
        }
        timerm = jsonpl.data.quotaMap."pd.remainTime"
        Integer timermHR = timerm / 60
        Integer timermMIN = timerm - timermHR * 60
        BatteryStatus = timermHR + ":" + timermMIN
        if (BatteryStatus != state.tbs ) {
          ProcessEvent( "Battery Status",  BatteryStatus, null, true )
          state.tbs = BatteryStatus
        }
        // Get JSON varaible for device outputs - case by model
        switch (state.EFmodel) {
        case "delta2": 
         // log.info "Loading Delta 2 Data Map"
         ACOutput_Enabled  = jsonpl.data.quotaMap."inv.cfgAcEnabled" 
         AcAlways_Enabled  = jsonpl.data.quotaMap."pd.acAutoOnCfg" 
         DCOutput_Enabled  = jsonpl.data.quotaMap."mppt.carState"
         USBOutput_Enabled = jsonpl.data.quotaMap."pd.dcOutState"
         LEDOutput_Enabled = null
         XBoost_Enabled = jsonpl.data.quotaMap."mppt.cfgAcXboost"
         ProcessEvent( "power" ,              jsonpl.data.quotaMap."inv.outputWatts", "w", true  ) 
         ProcessEvent( "temperature" ,       (jsonpl.data.quotaMap."bms_bmsStatus.temp" * mul + adder as int), tunit, true  )
         ProcessEvent( "battery" ,            jsonpl.data.quotaMap."bms_emsStatus.lcdShowSoc", "%", true  ) 
         ProcessEvent( "Output Status AC",    jsonpl.data.quotaMap."inv.cfgAcEnabled", null, true )
         ProcessEvent( "Output Status DC" ,   jsonpl.data.quotaMap."mppt.carState", null, true )
         ProcessEvent( "Output Status USB" ,  jsonpl.data.quotaMap."pd.dcOutState", null, true )
         ProcessEvent( "Output Status LED" , 0 , null, true )
         ProcessEvent( "Output AC Always" ,   jsonpl.data.quotaMap."pd.acAutoOnCfg", null, true)
         ProcessEvent( "Cycles on Master" ,   jsonpl.data.quotaMap."bms_bmsStatus.cycles", null, true  )
         if (jsonpl.data.quotaMap."bms_slave.cycles" != null)     ProcessEvent( "Cycles on Slave1" ,  jsonpl.data.quotaMap."bms_slave.cycles", null, true  )
         if (jsonpl.data.quotaMap."bms_slave.cycles" == null)     ProcessEvent( "Cycles on Slave1" ,  0, null, true  )
         ProcessEvent( "Fault Code mppt" ,    jsonpl.data.quotaMap."mppt.faultCode", null, true  )
         ProcessEvent( "Fault Master Cell" ,  jsonpl.data.quotaMap."bms_bmsStatus.bmsFault", null, true  )
         if (jsonpl.data.quotaMap."bms_slave.bmsFault" != null)   ProcessEvent( "Fault Slave1 Cell" ,  jsonpl.data.quotaMap."bms_slave.bmsFault", null, true  )
         if (jsonpl.data.quotaMap."bms_slave.bmsFault" == null)   ProcessEvent( "Fault Slave1 Cell" ,  0, null, true  )
         ProcessEvent( "SOC Master Cell" ,    (jsonpl.data.quotaMap."bms_bmsStatus.f32ShowSoc" as int), "%", true  )
         ProcessEvent( "SOC Master Display",  jsonpl.data.quotaMap."bms_emsStatus.lcdShowSoc", "%", true )
         if (jsonpl.data.quotaMap."bms_slave.soc" != null)        ProcessEvent( "SOC Slave1 Cell" ,  jsonpl.data.quotaMap."bms_slave.soc", "%", true  )
         if (jsonpl.data.quotaMap."bms_slave.soc" == null)        ProcessEvent( "SOC Slave1 Cell" ,  0 , "%", true  )
         if (jsonpl.data.quotaMap."bms_slave.f32ShowSoc" != null) ProcessEvent( "SOC Slave1 Display" , (jsonpl.data.quotaMap."bms_slave.f32ShowSoc" as int), "%", true )
         if (jsonpl.data.quotaMap."bms_slave.f32ShowSoc" == null) ProcessEvent( "SOC Slave1 Display" , 0 , "%", true )
         ProcessEvent( "Temp DC" ,            (jsonpl.data.quotaMap."pd.carTemp"  * mul + adder as int), tunit, true )
         ProcessEvent( "Temp Inverter Out",   (jsonpl.data.quotaMap."inv.outTemp" * mul + adder as int), tunit, true  )
         ProcessEvent( "Temp Master Cell" ,   (jsonpl.data.quotaMap."bms_bmsStatus.temp" * mul + adder as int), tunit, true  )
         ProcessEvent( "Temp Mppt" ,          (jsonpl.data.quotaMap."mppt.mpptTemp"* mul + adder as int), tunit, ture  )
         if (jsonpl.data.quotaMap."bms_slave.temp"  != null)      ProcessEvent( "Temp Slave Cell" , (jsonpl.data.quotaMap."bms_slave.temp" * mul + adder as int) , tunit, true  )
         if (jsonpl.data.quotaMap."bms_slave.temp"  == null)      ProcessEvent( "Temp Slave Cell" , "N/A" , tunit, true  ) 
         ProcessEvent( "Time Remain" ,        jsonpl.data.quotaMap."pd.remainTime", "mins", true )
         ProcessEvent( "Watts DC Out" ,       jsonpl.data.quotaMap."pd.carWatts", "W", true )
         ProcessEvent( "Watts DC In" ,        jsonpl.data.quotaMap."pd.chgPowerDC", "W", true )  
         ProcessEvent( "Watts AC In" ,        jsonpl.data.quotaMap."inv.inputWatts", "W", true )
         ProcessEvent( "Watts AC Out" ,       jsonpl.data.quotaMap."inv.outputWatts", "W", true )
         if (jsonpl.data.quotaMap."bms_slave.inputWatts"  != null) ProcessEvent( "Watts Slave1 In" ,  jsonpl.data.quotaMap."bms_slave.inputWatts", "W", true )
         if (jsonpl.data.quotaMap."bms_slave.inputWatts"  == null) ProcessEvent( "Watts Slave1 In" ,  0, "W", true ) 
         if (jsonpl.data.quotaMap."bms_slave.outputWatts" != null) ProcessEvent( "Watts Slave1 Out" ,  jsonpl.data.quotaMap."bms_slave.outputWatts", "W", true )
         if (jsonpl.data.quotaMap."bms_slave.outputWatts" == null) ProcessEvent( "Watts Slave1 Out" , 0, "W", true ) 
         ProcessEvent( "Limit Charging Rate" ,jsonpl.data.quotaMap."mppt.cfgChgWatts", "%", true )
         ProcessEvent( "Limit Discharge" ,    jsonpl.data.quotaMap."bms_emsStatus.minDsgSoc", "%", true )
         ProcessEvent( "Limit Charge" ,       jsonpl.data.quotaMap."bms_emsStatus.maxChargeSoc", "%", true )
         ProcessEvent( "SmartGen On Point" ,  jsonpl.data.quotaMap."bms_emsStatus.minOpenOilEb", "%", true )
         ProcessEvent( "SmartGen Off Point" , jsonpl.data.quotaMap."bms_emsStatus.maxCloseOilEb", "%", true )     
         ProcessEvent( "Limit CarCharge Amps",jsonpl.data.quotaMap."mppt.dcChgCurrent" / 1000, "A", true )
         ProcessEvent( "Output XBoost" ,      jsonpl.data.quotaMap."mppt.cfgAcXboost", null, true )
         ProcessEvent( "TimeOut Unit" ,       jsonpl.data.quotaMap."pd.standbyMin" / 60 , null, true )
         ProcessEvent( "TimeOut Screen" ,     jsonpl.data.quotaMap."pd.lcdOffSec" / 60, null, true ) 
         ProcessEvent( "Timeout AC Output" ,  jsonpl.data.quotaMap."mppt.acStandbyMins" / 60, null, true )
         ProcessEvent( "Timeout DC Output" ,  jsonpl.data.quotaMap."mppt.carStandbyMin" / 60, null, true )
         break
       case "river":
         //log.info "Loading River Data Map"
         ACOutput_Enabled  = jsonpl.data.quotaMap."inv.cfgAcEnabled"
         DCOutput_Enabled  = jsonpl.data.quotaMap."pd.carSwitch"
         USBOutput_Enabled = null
         LEDOutput_Enabled = jsonpl.data.quotaMap."pd.ledState"
         AcAlways_Enabled  = jsonpl.data.quotaMap."inv.acPassByAutoEn"
         ProcessEvent(  "battery" ,             jsonpl.data.quotaMap."bmsMaster.soc", "%", true) 
         ProcessEvent(  "power" ,               jsonpl.data.quotaMap."inv.outputWatts", "W", true)
         ProcessEvent(  "temperature" ,        (jsonpl.data.quotaMap."inv.outTemp" * mul + adder as int), tunit, true) 
         ProcessEvent(  "Output Status AC" ,    jsonpl.data.quotaMap."inv.cfgAcEnabled", null, true)
         ProcessEvent(  "Output Status DC" ,    jsonpl.data.quotaMap."pd.carSwitch", null, true )
         ProcessEvent(  "Output Status USB" , 0 , null, true)
         ProcessEvent(  "Output Status LED" ,   jsonpl.data.quotaMap."pd.ledState", null, true)
         ProcessEvent(  "Cycles on Master" ,    jsonpl.data.quotaMap."bmsMaster.cycles", null, true )
         if (jsonpl.data.quotaMap."bmsSlave1.cycles" != null)     ProcessEvent(  "Cycles on Slave1" , jsonpl.data.quotaMap."bmsSlave1.cycles", null, true)
         ProcessEvent(  "Fault Master Cell" ,   jsonpl.data.quotaMap."bmsMaster.bmsFault", null, true )
         ProcessEvent(  "SOC Master Cell" ,     jsonpl.data.quotaMap."bmsMaster.soc", "%", true )
         if (jsonpl.data.quotaMap."bmsSlave.soc"  != null)       ProcessEvent(  "SOC Slave1 Cell" , jsonpl.data.quotaMap."bmsSlave.soc", "%", true  )
         if (jsonpl.data.quotaMap."bmsSlave1.soc" != null)       ProcessEvent(  "SOC Slave1 Cell" , jsonpl.data.quotaMap."bmsSlave1.soc", "%", true  )
         ProcessEvent(  "Temp DC" ,            (jsonpl.data.quotaMap."pd.carTemp"  * mul + adder as int),  tunit, true )
         ProcessEvent(  "Temp Inverter Out" ,  (jsonpl.data.quotaMap."inv.outTemp" * mul + adder as int), tunit, true )
         ProcessEvent(  "Temp Inverter In" ,   (jsonpl.data.quotaMap."inv.inTemp" * mul + adder as int), tunit, true )
         ProcessEvent(  "Temp Master Cell" ,   (jsonpl.data.quotaMap."bmsMaster.temp" * mul + adder as int) , tunit, true )
         if (jsonpl.data.quotaMap."bmsSlave1.temp" != null )     ProcessEvent(  "Temp Slave1 Cell" , (jsonpl.data.quotaMap."bmsSlave1.temp" * mul + adder as int), tunit, true ) 
         ProcessEvent( "Time Remain" ,         jsonpl.data.quotaMap."pd.remainTime", "mins", true )
         ProcessEvent( "Watts DC Out" ,        jsonpl.data.quotaMap."pd.carWatts", "W", true )
         ProcessEvent( "Watts DC In" ,         jsonpl.data.quotaMap."pd.chgPowerDC", "W", true )  
         ProcessEvent( "Watts AC In" ,         jsonpl.data.quotaMap."inv.inputWatts", "W", true )
         ProcessEvent( "Watts AC Out" ,        jsonpl.data.quotaMap."inv.outputWatts", "W", true )
         ProcessEvent( "Output XBoost" ,       jsonpl.data.quotaMap."inv.cfgAcXboost", null, true )
         ProcessEvent( "TimeOut Unit" ,        jsonpl.data.quotaMap."pd.standByMode" / 60 , null, true )
         //ProcessEvent( "TimeOut Screen" ,    jsonpl.data.quotaMap."pd.lcdOffSec" / 60, null, true ) 
         ProcessEvent( "Timeout AC Output" ,   jsonpl.data.quotaMap."inv.cfgStandbyMin" / 60, null, true )
         ProcessEvent( "Slow Charge Enable" ,  jsonpl.data.quotaMap."inv.cfgAcChgModeFlg", null, true )
         break 
       case "deltapro":
         //log.info "Loading Delta Pro Data Map"
         ACOutput_Enabled  = jsonpl.data.quotaMap."inv.cfgAcEnabled"
         DCOutput_Enabled  = jsonpl.data.quotaMap."mppt.carState"
         USBOutput_Enabled = null
         LEDOutput_Enabled = null
         XBoost_Enabled    = jsonpl.data.quotaMap."mppt.cfgAcXboost"
         AcAlways_Enabled  = jsonpl.data.quotaMap."inv.acPassByAutoEn"
         ProcessEvent(  "temperature" ,      (jsonpl.data.quotaMap."bmsMaster.temp" * mul + adder as int), tunit, true ) 
         ProcessEvent(  "battery" ,           jsonpl.data.quotaMap."bmsMaster.soc", "%",  true )
         ProcessEvent(  "power" ,             jsonpl.data.quotaMap."inv.inputWatts", "W", true ) 
         ProcessEvent(  "Output Status AC" ,  jsonpl.data.quotaMap."inv.cfgAcEnabled", null, true )
         ProcessEvent(  "Output Status DC" ,  jsonpl.data.quotaMap."mppt.carState", null, true  )
         ProcessEvent(  "Output Status USB" , 0 , null, true )
         ProcessEvent(  "Output Status LED" , 0 , null, true )
         ProcessEvent(  "Output AC Always" ,  jsonpl.data.quotaMap."inv.acPassByAutoEn", null, true)
         ProcessEvent(  "Cycles on Master" ,  jsonpl.data.quotaMap."bmsMaster.cycles", null, true )
         if (jsonpl.data.quotaMap."bmsSlave1.cycles" != null) ProcessEvent(  "Cycles on Slave1" , jsonpl.data.quotaMap."bmsSlave1.cycles", null, true )
         if (jsonpl.data.quotaMap."bmsSlave2.cycles" != null) ProcessEvent(  "Cycles on Slave2" , jsonpl.data.quotaMap."bmsSlave2.cycles", null, true ) 
         ProcessEvent(  "Fault Code mppt" ,   jsonpl.data.quotaMap."mppt.faultCode", null, true )
         ProcessEvent(  "Fault Master Cell" , jsonpl.data.quotaMap."bmsMaster.bmsFault", null, true )
         if (jsonpl.data.quotaMap."bmsSlave1.bmsFault" != null) ProcessEvent(  "Fault Slave1 Cell" , jsonpl.data.quotaMap."bmsSlave1.bmsFault", null, true )
         if (jsonpl.data.quotaMap."bmsSlave1.bmsFault" == null) ProcessEvent(  "Fault Slave1 Cell" , 0 , null, true )   
         if (jsonpl.data.quotaMap."bmsSlave2.bmsFault" != null) ProcessEvent(  "Fault Slave2 Cell" , jsonpl.data.quotaMap."bmsSlave2.bmsFault", null, true )
         if (jsonpl.data.quotaMap."bmsSlave2.bmsFault" == null) ProcessEvent(  "Fault Slave2 Cell" , 0, null, true )   
         ProcessEvent(  "SOC Master Cell" ,   jsonpl.data.quotaMap."bmsMaster.soc", "%",  true )
         if (jsonpl.data.quotaMap."bmsSlave1.soc" != null) ProcessEvent(  "SOC Slave1 Cell" ,     jsonpl.data.quotaMap."bmsSlave1.soc", "%",  true )
         if (jsonpl.data.quotaMap."bmsSlave1.soc" == null) ProcessEvent(  "SOC Slave1 Cell" ,     0, "%",  true )   
         if (jsonpl.data.quotaMap."bmsSlave2.soc" != null) ProcessEvent(  "SOC Slave2 Cell" ,     jsonpl.data.quotaMap."bmsSlave2.soc", "%",  true )
         if (jsonpl.data.quotaMap."bmsSlave2.soc" == null) ProcessEvent(  "SOC Slave2 Cell" ,     0, "%",  true )   
         ProcessEvent(  "Temp DC" ,           (jsonpl.data.quotaMap."pd.carTemp"  * mul + adder as int), tunit, true )
         ProcessEvent(  "Temp Inverter" ,     (jsonpl.data.quotaMap."inv.outTemp" * mul + adder as int), tunit, true )
         ProcessEvent(  "Temp Master Cell" ,  (jsonpl.data.quotaMap."bmsMaster.temp" * mul + adder as int), tunit, true )
         ProcessEvent(  "Temp Mppt" ,         (jsonpl.data.quotaMap."mppt.mpptTemp" * mul + adder as int), tunit, true )
         if (jsonpl.data.quotaMap."bmsSlave1.temp" != null) ProcessEvent(  "Temp Slave1 Cell" , (jsonpl.data.quotaMap."bmsSlave1.temp" * mul + adder as int), tunit, true )
         if (jsonpl.data.quotaMap."bmsSlave1.temp" == null) ProcessEvent(  "Temp Slave1 Cell" , "N/A", tunit, true ) 
         if (jsonpl.data.quotaMap."bmsSlave2.temp" != null) ProcessEvent(  "Temp Slave2 Cell" , (jsonpl.data.quotaMap."bmsSlave2.temp" * mul + adder as int), tunit, true )
         if (jsonpl.data.quotaMap."bmsSlave2.temp" == null) ProcessEvent(  "Temp Slave2 Cell" , "N/A", tunit, true )   
         ProcessEvent(  "Time Remain" ,       jsonpl.data.quotaMap."pd.remainTime", "mins", true )
         ProcessEvent(  "Watts DC Out" ,      jsonpl.data.quotaMap."pd.carWatts", "W", true )
         ProcessEvent(  "Watt DC In" ,        jsonpl.data.quotaMap."mppt.inWatts",  null, true )  
         ProcessEvent(  "Watts AC In" ,       jsonpl.data.quotaMap."inv.inputWatts", "W", true )
         ProcessEvent(  "Watts AC Out" ,      jsonpl.data.quotaMap."inv.outputWatts", "W", true )
         if (jsonpl.data.quotaMap."bmsSlave1.inputWatts"  != null ) ProcessEvent(  "Watts Slave1 In" , jsonpl.data.quotaMap."bmsSlave1.inputWatts", "W", true )
         if (jsonpl.data.quotaMap."bmsSlave1.inputWatts"  == null ) ProcessEvent(  "Watts Slave1 In" , 0, "W", true )   
         if (jsonpl.data.quotaMap."bmsSlave1.outputWatts" != null ) ProcessEvent(  "Watts Slave1 Out", jsonpl.data.quotaMap."bmsSlave1.outputWatts", "W", true )
         if (jsonpl.data.quotaMap."bmsSlave1.outputWatts" == null ) ProcessEvent(  "Watts Slave1 Out", 0, "W", true )   
         if (jsonpl.data.quotaMap."bmsSlave2.inputWatts"  != null ) ProcessEvent(  "Watts Slave2 In" , jsonpl.data.quotaMap."bmsSlave2.inputWatts", "W", true )
         if (jsonpl.data.quotaMap."bmsSlave2.inputWatts"  == null ) ProcessEvent(  "Watts Slave2 In" , 0, "W", true )   
         if (jsonpl.data.quotaMap."bmsSlave2.outputWatts" != null ) ProcessEvent(  "Watts Slave2 Out", jsonpl.data.quotaMap."bmsSlave2.outputWatts", "W", true ) 
         if (jsonpl.data.quotaMap."bmsSlave2.outputWatts" == null ) ProcessEvent(  "Watts Slave2 Out", 0, "W", true )    
         ProcessEvent( "Limit Charging Rate" ,jsonpl.data.quotaMap."inv.cfgSlowChgWatts", "%", true )
         ProcessEvent( "Limit Discharge" ,    jsonpl.data.quotaMap."ems.minDsgSoc", "%", true )
         ProcessEvent( "Limit Charge" ,       jsonpl.data.quotaMap."ems.maxChargeSoc", "%", true )
         ProcessEvent( "SmartGen On Point" ,  jsonpl.data.quotaMap."ems.minOpenOilEbSoc", "%", true )
         ProcessEvent( "SmartGen Off Point" , jsonpl.data.quotaMap."ems.maxCloseOilEbSoc", "%", true )     
         ProcessEvent( "Limit CarCharge Amps",jsonpl.data.quotaMap."mppt.cfgDcChgCurrent" / 1000, "A", true )
         ProcessEvent( "Output XBoost" ,      jsonpl.data.quotaMap."inv.cfgAcXboost", null, true )
         ProcessEvent( "TimeOut Unit" ,       jsonpl.data.quotaMap."pd.standByMode" / 60 , null, true )
         ProcessEvent( "TimeOut Screen" ,     jsonpl.data.quotaMap."pd.lcdOffSec" / 60, null, true ) 
         ProcessEvent( "Timeout AC Output" ,  jsonpl.data.quotaMap."inv.cfgStandbyMin" / 60, null, true )
         break
      default:
        DCOutput_Enabled  = null
        USBOutput_Enabled = null
        LEDOutput_Enabled = null
        XBoost_Enabled    = null
        AcAlways_Enabled  = null
        log.info "model type not found - model input currently set as " + EFmodel
      }
      sendEvent(name: "Last Update", value: date, isStateChanged: true)
      //check if output states have changed and update the child's state if required.
      if (ACOutput_Enabled != state.ACoutput) {
        state.cdtype = 1
        def cd = fetchChild("Switch")
        if (cd != null) {
          if (ACOutput_Enabled == 1) {
            cd.parse([[name: "switch", value: "on", descriptionText: "AC Switch was turned on"]])
            state.ACoutput = 1
            log.info "updating AC switch state to ON"
          }else{
           cd.parse([[name: "switch", value: "off", descriptionText: "AC Switch was turned off"]])
           state.ACoutput = 0
           log.info "updating AC switch state to OFF"
          }
        }
      }
      if (DCOutput_Enabled != state.DCoutput) {
        state.cdtype = 2
        def cd = fetchChild("Switch")
        if (cd != null) {
          if (DCOutput_Enabled == 1) {
            cd.parse([[name: "switch", value: "on", descriptionText: "DC Switch was turned on"]])
            state.DCoutput = 1
            log.info "updating DC switch state to ON"
          }else{
            log.info "updating DC switch state to OFF"
            cd.parse([[name: "switch", value: "off", descriptionText: "DC Switch was turned off"]])
            state.DCoutput = 0
          }
        }
      }
      if (USBOutput_Enabled != null) {
        if (USBOutput_Enabled != state.USBoutput) {
          state.cdtype = 3
          def cd = fetchChild("Switch")
          if (cd != null) {
            if (USBOutput_Enabled == 1) {
              cd.parse([[name: "switch", value: "on", descriptionText: "USB Switch was turned on"]])
              state.USBoutput = 1
              log.info "updating USB switch state to ON"
            }else{
              cd.parse([[name: "switch", value: "off", descriptionText: "USB Switch was turned off"]])
              state.USBoutput = 0
              log.info "updating USB switch state to OFF"
            }
          }
        }
      }
      if (LEDOutput_Enabled != null) {
        if (LEDOutput_Enabled != state.LEDoutput) {
          state.cdtype = 4
          def cd = fetchChild("Switch")
          if (cd != null) {
            if (LEDOutput_Enabled == 0) {
              cd.parse([[name: "switch", value: "off", descriptionText: "LED light was turned off"]])
              state.LEDoutput = 0
              log.info "updating LED switch state to OFF"
            }else{
              cd.parse([[name: "switch", value: "on", descriptionText: "LED Light was turned on"]])
              state.LEDoutput = LEDOutput_Enabled
              log.info "updating USB switch state to " + state.LEDoutput 
            }
          }
        }
      }
      if (XBoost_Enabled != null) {
        if (XBoost_Enabled != state.XBoost) {
         state.cdtype = 5
         def cd = fetchChild("Switch")
         if (cd != null) {
           if (XBoost_Enabled == 0) {
             cd.parse([[name: "switch", value: "off", descriptionText: "XBoost was turned off"]])
             state.XBoost = 0
             log.info "updating XBoost switch state to OFF"
           }else{
             cd.parse([[name: "switch", value: "on", descriptionText: "XBoost was turned on"]])
             state.XBoost = 1
             log.info "updating XBoost switch state to ON"
           }
         }
       }
     }   
     if (AcAlways_Enabled != null) {
        if (AcAlways_Enabled != state.AcAlways) {
         state.cdtype = 6
         def cd = fetchChild("Switch")
         if (cd != null) {
           if (AcAlways_Enabled == 0) {
             cd.parse([[name: "switch", value: "off", descriptionText: "AcAlways was turned off"]])
             state.AcAlways = 0
             log.info "updating AC Always switch state to OFF"
           }else{
             cd.parse([[name: "switch", value: "on", descriptionText: "AcAlways was turned on"]])
             state.AcAlways = 1
             log.info "updating AC Always switch state to ON"
           }
         }
       }
     } 
     if (state.UpdateInterval == null) state.UpdateInterval = 0    
     state.UpdateInterval = state.UpdateInterval + 1
     if  (state.UpdateInterval > 20 ) state.UpdateInterval = 1 
     if (state.skipEnMon == 1 ) {
       state.skipEnMon = 0
     }else{
       EnergyCounter()
     }
   UpdateTile()
  }              
 }
}
// set-up to bypass energy calculation on manual scans
def ManualRefreshData() {
    state.skipEnMon = 1
    state.reload = 1
    getParent().refreshdata()
}

def updated() {
  log.info "update running"
  setupmqtt()
}

def Disconnect() {
  log.info "Disconnecting from mqtt"
  interfaces.mqtt.disconnect()
  sendEvent(name: "mqtt Status", value: "OFFLINE", isStateChanged: true)
  log.info "MQTT disconnected"

}
def setupmqtt() {
  if (logEnable) log.info "initialize"
  if (logEnable) runIn(900, logsOff)
  //device.updateSetting("Deltaflag", [value: "false", type: "bool"])
  switch (state.EFmodel) {
  case "delta2":
    state.AConPayload        = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"acOutCfg","params":{"out_voltage":-1,"out_freq":255,"xboost":255,"enabled":1},"version":"1.0"}/
    state.ACoffPayload       = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"acOutCfg","params":{"out_voltage":-1,"out_freq":255,"xboost":255,"enabled":0},"version":"1.0"}/
    state.DConPayload        = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"mpptCar","params":{"enabled":1},"version":"1.0"}/
    state.DCoffPayload       = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"mpptCar","params":{"enabled":0},"version":"1.0"}/
    state.USBonPayload       = /{"from":"Android","id":"498321003","moduleType":1,"operateType":"dcOutCfg","params":{"enabled":1},"version":"1.0"}/
    state.USBoffPayload      = /{"from":"Android","id":"498321003","moduleType":1,"operateType":"dcOutCfg","params":{"enabled":0},"version":"1.0"}/
    state.LEDonPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 1},"version": "1.0"}/
    state.LEDoffPayload      = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 0},"version": "1.0"}/
    state.refreshpayload     = /{"from":"Android","id":"380541001","moduleType":0,"operateType":"latestQuotas","params":{},"version":"1.0"}/
    state.XboostONPayload    = /{"from":"Android","id":"153151096","moduleType":5,"operateType":"acOutCfg","params":{"out_voltage":-1,"out_freq":255,"xboost":1,"enabled":255},"version":"1.0"}/
    state.XboostOFFPayload   = /{"from":"Android","id":"157161098","moduleType":5,"operateType":"acOutCfg","params":{"out_voltage":-1,"out_freq":255,"xboost":0,"enabled":255},"version":"1.0"}/
    state.AcAlwaysOFFPayload = /{"from":"Android","id":"281801012","moduleType":1,"operateType":"acAutoOn","params":{"cfg":0},"version":"1.0"}/
    state.AcAlwaysONPayload  = /{"from":"Android","id":"281801012","moduleType":1,"operateType":"acAutoOn","params":{"cfg":1},"version":"1.0"} / 
    break
  case "river":
    state.AConPayload        = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 1},"version":"1.0"}/
    state.ACoffPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 0},"version":"1.0"}/
    state.DConPayload        = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 34,"enabled": 1},"version": "1.0"}/
    state.DCoffPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 34,"enabled": 0},"version": "1.0"}/
    state.USBonPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 1},"version": "1.0"}/
    state.USBoffPayload      = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 0},"version": "1.0"}/
    state.LEDonPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 35,"state": 1},"version": "1.0"}/
    state.LEDoffPayload      = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 35,"state": 0},"version": "1.0"}/
    state.refreshpayload     = /{"from":"Android","id":"380541001","moduleType":0,"operateType":"latestQuotas","params":{},"version":"1.0"}/
    state.AcAlwaysOFFPayload = /{"from": "Android","id": "435361475","moduleType": 0,"operateType": "TCP","params": {"id": 84,"enabled": 0},"version": "1.0"} /
    state.AcAlwaysONPayload  = /{"from": "Android","id": "435361475","moduleType": 0,"operateType": "TCP","params": {"id": 84,"enabled": 1},"version": "1.0"} /
    state.XboostONPayload    = /{"from": "Android","id": "476501541","moduleType": 0,"operateType": "TCP","params": {"xboost": 1,"id": 66},"version": "1.0"} /
    state.XboostOFFPayload   = /{"from": "Android","id": "476501541","moduleType": 0,"operateType": "TCP","params": {"xboost": 0,"id": 66},"version": "1.0"} /
      
    break
  case "deltapro":
    state.AConPayload        = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 1},"version":"1.0"}/
    state.ACoffPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 0},"version":"1.0"}/
    state.DConPayload        = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 81,"enabled": 1},"version": "1.0"}/
    state.DCoffPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 81,"enabled": 0},"version": "1.0"}/
    state.USBonPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 1},"version": "1.0"}/
    state.USBoffPayload      = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 0},"version": "1.0"}/
    state.LEDonPayload       = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 1},"version": "1.0"}/
    state.LEDoffPayload      = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 0},"version": "1.0"}/
    state.refreshpayload     = /{"from":"Android","id":"380541001","moduleType":0,"operateType":"latestQuotas","params":{},"version":"1.0"}/
    state.XboostONPayload    = /{"from": "Android","id": "476501541","moduleType": 0,"operateType": "TCP","params": {"xboost": 1,"id": 66},"version": "1.0"} /
    state.XboostOFFPayload   = /{"from": "Android","id": "476501541","moduleType": 0,"operateType": "TCP","params": {"xboost": 0,"id": 66},"version": "1.0"} /
    state.AcAlwaysOFFPayload = /{"from": "Android","id": "435361475","moduleType": 0,"operateType": "TCP","params": {"id": 84,"enabled": 0},"version": "1.0"} /
    state.AcAlwaysONPayload  = /{"from": "Android","id": "435361475","moduleType": 0,"operateType": "TCP","params": {"id": 84,"enabled": 1},"version": "1.0"} /  
    break
  default:
    state.AConPayload    = null
    state.ACoffPayload   = null
    state.DConPayload    = null
    state.DCoffPayload   = null
    state.USBonPayload   = null
    state.USBoffPayload  = null
    state.LEDonPayload   = null
    state.LEDoffPayload  = null
    state.refreshpayload = null
    log.info "model type not found - model input currently set as " + EFmodel
  }
  state.UpdateInterval = 0
  state.tbs = "00:00"
  return
}

//set up mqtt server connection
def mqttConnect() {
  try {
    if (settings?.retained == null) settings?.retained = false
    if (settings?.QOS == null) setting?.QOS = "0"
    //open connection
    mqttbroker = "ssl://" + settings?.MQTTBroker + ":8883"
    settings?.topicSub = "/app/" + mqttclientname + "/" + unitserialno + "/thing/property/get_reply"
    if (logEnable) log.info "broker " + mqttbroker
    if (logEnable) log.info "client " + mqttclientname
    if (logEnable) log.info "username   " + username
    if (logEnable) log.info "password " + password
    interfaces.mqtt.connect(mqttbroker,
      mqttclientname,
      username,
      password,
      lastWillQos: 0,
      lastWillMessage: "offline",
      lastWillRetain: true,
      tlsVersion: 1.2)
    if (logEnable) log.info "mqtt.con" + mqttConnect
    //give it a chance to start
    pauseExecution(1000)
    //log.info "Connection established"
    if (logEnable) log.debug "Subscribed to: ${settings?.topicSub}"
    log.info settings?.topicSub
    interfaces.mqtt.subscribe(settings?.topicSub)
    sendEvent(name: "mqtt Status", value: "Online", isStateChanged: true)
    state.mqttOnline = 1
    } catch (e) {
    sendEvent(name: "mqtt Status", value: "OFFLINE", isStateChanged: true)
    state.mqttOnline = 0      
    if (logEnable) log.debug "Initialize error: ${e.message}"
  }
}

def mqttClientStatus(String status) {
  log.info "mqttClientStatus " + status
  if (!status.contains("succeeded")) {
    try {
      log.info "mqttClientStatus=" + status
      interfaces.mqtt.disconnect()
    } catch (e) {}
    sendEvent(name: "mqtt Status", value: "OFFLINE", isStateChanged: true)
    state.mqttOnline = 0  
    if (logEnable) log.debug "Broker: ${status} Will restart in 15 seconds"
    runIn(15, mqttConnect)
  }
}

def logsOff() {
  log.warn "Debug logging disabled."
  device.updateSetting("logEnable", [value: "false", type: "bool"])
}

void componentRefresh(cd) {
  log.info "received refresh request from ${cd.displayName}"
  state.skipEnMon = 1
  getParent().refreshdata()
  }

//when switch state changes are requested - Update the child switch
// set required payload request and runRequest to send command string to MQTT broker
void ACSwitchON() {
  state.cdtype = 1
  def cd = fetchChild("Switch")
  if (cd != null) {
    cd.parse([[name: "switch", value: "on", descriptionText: "AC Switch was turned on"]])
    log.info "AC switch on request"
    tempPayload = state.AConPayload
    RunRequest (tempPayload)
  }
}

void ACSwitchOFF() {
  state.cdtype = 1
  def cd = fetchChild("Switch")
  if (cd != null) {
    cd.parse([[name: "switch", value: "off", descriptionText: "AC Switch was turned off"]])
    log.info "AC switch off request"
    tempPayload = state.ACoffPayload
    RunRequest (tempPayload)
  }      
}

void DCSwitchON() {
  state.cdtype = 2
  def cd = fetchChild("Switch")
  if (cd != null) {
    cd.parse([[name: "switch", value: "on", descriptionText: "DC Switch was turned on"]])
    log.info "DC switch on request"
    tempPayload = state.DConPayload
    RunRequest (tempPayload)
  }
}

void DCSwitchOFF() {
  state.cdtype = 2
  def cd = fetchChild("Switch")
  if (cd != null) {
    cd.parse([[name: "switch", value: "off", descriptionText: "DC Switch was turned off"]])
    log.info "DC switch off request"
    tempPayload = state.DCoffPayload
    RunRequest (tempPayload)
  }
}    
void USBSwitchON() {
  if (state.EFmodel == "delta2") {
    state.cdtype = 3
    def cd = fetchChild("Switch")
    if (cd != null) {
      cd.parse([[name: "switch", value: "on", descriptionText: "USB Switch was turned on"]])
      log.info "USB switch on request"
      tempPayload = state.USBonPayload
      RunRequest (tempPayload)
    }
  } else {
    log.info "USB Switch not supported due to model selection"
  }
}

void USBSwitchOFF() {
  if (state.EFmodel == "delta2") {
    state.cdtype = 3
    def cd = fetchChild("Switch")
    if (cd != null) {
      cd.parse([[name: "switch", value: "off", descriptionText: "USB Switch was turned off"]])
      log.info "USB switch off request"
      tempPayload = state.USBoffPayload
      RunRequest (tempPayload)
    }
  } else {
    log.info "USB Switch not supported due to model selection"
  }
}

void LEDSwitchON() {
  if (state.EFmodel == "river") {
    state.cdtype = 4
    def cd = fetchChild("Switch")
    if (cd != null) {
      cd.parse([[name: "switch", value: "on", descriptionText: "LED Light was turned on"]])
      log.info "LED light on request"
      tempPayload = state.LEDonPayload
      RunRequest (tempPayload)
    }
  } else {
    log.info "LED Switch not supported due to model selection"
  }
} 

void LEDSwitchOFF() {
  if (state.EFmodel == "river") {
    state.cdtype = 4
    def cd = fetchChild("Switch")
    if (cd != null) {
      cd.parse([[name: "switch", value: "off", descriptionText: "LED Light was turned off"]])
      log.info "LED light off request"
      tempPayload = state.LEDoffPayload
      RunRequest (tempPayload)
    }
  } else {
    log.info "LED Switch not supported due to model selection"
  }
}

void XBoostON() {
  state.cdtype = 5
  def cd = fetchChild("Switch")
  if (cd != null) {
    cd.parse([[name: "switch", value: "on", descriptionText: "XboostON was turned on"]])
    log.info "Xboost on request"
    tempPayload = state.XboostONPayload
    RunRequest (tempPayload)
  }
}

void XBoostOFF() {
  state.cdtype = 5
  def cd = fetchChild("Switch")
  if (cd != null) {
    cd.parse([[name: "switch", value: "off", descriptionText: "XboostOFF was turned off"]])
    log.info "Xboost off request"
    tempPayload = state.XboostOFFPayload
    RunRequest (tempPayload)
  }
}

void PowerUpAcON() {
  if (EFmodel == "deltapro" || "delta2 ") {
    state.cdtype = 6
    def cd = fetchChild("Switch")
    if (cd != null) {
      cd.parse([[name: "switch", value: "on", descriptionText: "PowerUpAc was turned on"]])
      log.info "PowerUpAc on request"
      tempPayload = state.AcAlwaysONPayload
      RunRequest (tempPayload)
    }
  } else {
    log.info "ACAlways not supported due to model selection"
  }
}

void PowerUpAcOFF() {
  if (EFmodel == "deltapro"  || "delta2" )   {
    state.cdtype = 6
    def cd = fetchChild("Switch")
    if (cd != null) {
      cd.parse([[name: "switch", value: "off", descriptionText: "PowerUpAc was turned off"]])
      log.info "PowerUpAc off request"
      tempPayload = state.AcAlwaysOFFPayload
      RunRequest (tempPayload)
    }
  } else {
    log.info "ACAlways not supported due to model selection"
  }
}

//get data for switches 1, 2, and 3. If child1 does not exist - create all of them.
def fetchChild(String type) {
  String thisId = device.id
  //log.info "fetchChild run >> thisID=" + thisId + " cdtype=" + state.cdtype
  def cd = getChildDevice("${thisId}${state.cdtype}-Switch")
  //log.info "fetchchild CD=" + cd
  if (cd == null) {
    if (state.cdtype == 1)      cd1 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}1-Switch", [name: "${device.getName()} AC Switch", isComponent: true])
    if (state.cdtype == 2)      cd2 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}2-Switch", [name: "${device.getName()} DC Switch", isComponent: true])
    if (state.EFmodel == "delta2") {
      if (state.cdtype == 3 )   cd3 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}3-Switch", [name: "${device.getName()} USB Switch", isComponent: true])
      if (state.cdtype == 5 )   cd5 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}5-Switch", [name: "${device.getName()} XBoost", isComponent: true])
      if (state.cdtype == 6 )   cd6 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}6-Switch", [name: "${device.getName()} AcAlways", isComponent: true])
    }
    if (state.EFmodel == "river") {
      if (state.cdtype == 4 )   cd4 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}4-Switch", [name: "${device.getName()} LED Switch", isComponent: true])
      if (state.cdtype == 5 )   cd5 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}5-Switch", [name: "${device.getName()} XBoost", isComponent: true])
    }
    if (state.EFmodel == "deltapro") {
      if (state.cdtype == 5 )   cd5 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}5-Switch", [name: "${device.getName()} XBoost", isComponent: true]) 
      if (state.cdtype == 6 )   cd6 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}6-Switch", [name: "EF AcAlways", isComponent: true])
    }   
    //log.info "type=" + type + " thisid=" + thisId + "displayname=" + device.displayName
   
     List < Map > defaultValues = []
     //cd.parse(defaultValues)
  }
  return cd
}

// child has requested state change to ON - determine what child is asking for change and run sequence to update device
void componentOn(cd) {
  getChildDevice(cd.deviceNetworkId).parse([
    [name: "switch", value: "on", descriptionText: "${cd.displayName} was turned on"]])
  switch (cd.displayName) {
  case "${device.getName()} AC Switch":
    ACSwitchON()
    break
  case "${device.getName()} USB Switch":
    USBSwitchON()
    break
  case "${device.getName()} DC Switch":
    DCSwitchON()
    break
  case "${device.getName()} LED Switch":
    LEDSwitchON()
    break
  case "${device.getName()} XBoost":
    XBoostON() 
    break
  case "${device.getName()} AcAlways":
    PowerUpAcON()   
    break 
   }
}

// child has requested state change to OFF - determine what child is asking for change and run sequence to update device
void componentOff(cd) {
  getChildDevice(cd.deviceNetworkId).parse([
    [name: "switch", value: "off", descriptionText: "${cd.displayName} was turned off"]])
  switch (cd.displayName) {
  case "${device.getName()} AC Switch":
    ACSwitchOFF()
    break
  case "${device.getName()} USB Switch":
    USBSwitchOFF()
    break
  case "${device.getName()} DC Switch":
    DCSwitchOFF()
    break
  case "${device.getName()} LED Switch":
    LEDSwitchOFF()
    break
    case "${device.getName()} XBoost":
    XBoostOFF() 
    break 
  case "${device.getName()} AcAlways":
    PowerUpAcOFF()   
    break 
   }
}
// Process data to check against current state value and then send an event if it has changed
// After 5 updates - update all attrubites to catch any misses - refresh count in refreshdata() block
def ProcessEvent(Variable, Value, Unit = null, ForceEvent = false) {
  if ((state."${ Variable }" != Value) || (state.UpdateInterval == 20 )) {
    state."${ Variable }" = Value
      if (Unit != null) {
        sendEvent(name: "${ Variable }", value: Value, unit: Unit, isStateChanged: true)
      } else {
        sendEvent(name: "${ Variable }", value: Value, isStateChanged: true)
      }
   }
}
// Process data to check against current state value and update if it has changed
def ProcessState( Variable, Value ){
  if( state."${ Variable }" != Value ){
    state."${ Variable }" = Value
  }
}
private void UpdateTile() {
  def val = ""
  // Create special compound/html tile
  val = "DC Temps:" + device.currentValue("Temp DC") + " Mppt Temp:" + device.currentValue("Temp Mppt") + " Master Temp:" + device.currentValue("Temp Master Cell") + " Slave Temp:" + device.currentValue("Temp Slave Cell").toString()
  val1 = "<B>DC Temp:</B>" + device.currentValue("Temp DC") + " <B>Mppt Temp:</B>" + device.currentValue("Temp Mppt") + " <B>Master Temp:</B>" + device.currentValue("Temp Master Cell") + " <B>Slave Temp:</B>" + device.currentValue("Temp Slave Cell").toString()
     if( device.currentValue( "htmlTile1" ).toString() != val1 ){
     //   sendEvent( name: "htmlTile1", value: val1 )
     }
}
def LimitWattsCharging(cdata) {
    if (EFmodel == "deltapro") {
     if (cdata > 1800) cdata = 1800
  }else{
     if (cdata > 1500) cdata = 1500
  }   
  if (cdata <200 ) cdata= 200
  if (state.EFmodel == "delta2") tempPayload   =  / {"from":"Android","id":"408451032","moduleType":5,"operateType":"acChgCfg","params":{"chgWatts":${cdata},"chgPauseFlag":255},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload =  /{"from":"Android","id":"173871057","moduleType":0,"operateType":"TCP","params":{"slowChgPower":${cdata},"id":69},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    =  /{"from":"Android","id":"173871057","moduleType":0,"operateType":"TCP","params":{"slowChgPower":${cdata},"id":69},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def LimitDischarge(cdata) {
  if (cdata > 30) cdata= 30
  if (cdata < 0 ) cdata = 0
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"432011035","moduleType":2,"operateType":"dsgCfg","params":{"minDsgSoc":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"175921141","moduleType":0,"operateType":"TCP","params":{"id":51,"minDsgSoc":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"175921141","moduleType":0,"operateType":"TCP","params":{"id":51,"minDsgSoc":${cdata}},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def LimitCharge(cdata) {
  if (cdata < 50) cdata= 50 
  if (cdata > 100) cdata = 100
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"236231052","moduleType":2,"operateType":"upsConfig","params":{"maxChgSoc":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from": "Android","id": "288791335","moduleType": 0,"operateType": "TCP","params": {"maxChgSoc": ${cdata},"id": 49},"version": "1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from": "Android","id": "288791335","moduleType": 0,"operateType": "TCP","params": {"maxChgSoc": ${cdata},"id": 49},"version": "1.0"}/  
  RunRequest (tempPayload)
  }

def SmartGenAutoOFF(cdata) {
  if (cdata < 50) cdata= 50
  if (cdata >100 ) cdata = 100
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"323091083","moduleType":2,"operateType":"closeOilSoc","params":{"closeOilSoc":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"179771277","moduleType":0,"operateType":"TCP","params":{"closeOilSoc":${cdata},"id":53},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"179771277","moduleType":0,"operateType":"TCP","params":{"closeOilSoc":${cdata},"id":53},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def SmartGenAutoON(cdata) {
  if (cdata < 0) cdata= 0 
  if (cdata > 30) cdata = 30
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"115261063","moduleType":2,"operateType":"openOilSoc","params":{"openOilSoc":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"462251241","moduleType":0,"operateType":"TCP","params":{"openOilSoc":${cdata},"id":52},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"462251241","moduleType":0,"operateType":"TCP","params":{"openOilSoc":${cdata},"id":52},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def LimitCarInput(cdata) {
  if (cdata < 4) cdata = 4 
  if (cdata > 8) cdata = 8
  cdata = cdata * 1000
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"163361090","moduleType":5,"operateType":"dcChgCfg","params":{"dcChgCfg":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"173801343","moduleType":0,"operateType":"TCP","params":{"currMa":${cdata},"id":71},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"173801343","moduleType":0,"operateType":"TCP","params":{"currMa":${cdata},"id":71},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def TimeOutUnit(cdata) {
  if (cdata < 0) cdata = 0 
  if (cdata > 24) cdata = 24
  cdata = cdata * 60
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"436891007","moduleType":1,"operateType":"standbyTime","params":{"standbyMin":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from": "Android","id": "501251406","moduleType": 0,"operateType": "TCP","params": {"id": 33,"standByMode":${cdata}},"version": "1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from": "Android","id": "501251406","moduleType": 0,"operateType": "TCP","params": {"id": 33,"standByMode":${cdata}},"version": "1.0"}/  
  RunRequest (tempPayload)
  }

def TimeOutScreen(cdata) {
  if (cdata < 0) cdata = 0 
  if (cdata > 30) cdata = 30
  cdata = cdata * 60
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"409551012","moduleType":1,"operateType":"lcdCfg","params":{"brighLevel":255,"delayOff":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"332691391","moduleType":0,"operateType":"TCP","params":{"lcdTime":${cdata},"id":39},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"332691391","moduleType":0,"operateType":"TCP","params":{"lcdTime":${cdata},"id":39},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def TimeoutACOutput(cdata) {
  if (cdata < 0) cdata = 0 
  if (cdata > 24) cdata = 24
  cdata = cdata * 60
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"483091022","moduleType":5,"operateType":"standbyTime","params":{"standbyMins":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"194911444","moduleType":0,"operateType":"TCP","params":{"standByMins":${cdata},"id":153},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"194911444","moduleType":0,"operateType":"TCP","params":{"standByMins":${cdata},"id":153},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def TimeoutDCOutput(cdata) {
  if (cdata < 0) cdata = 0 
  if (cdata > 24) cdata = 24
  cdata = cdata * 60
  if (state.EFmodel == "delta2") tempPayload   = / {"from":"Android","id":"134031004","moduleType":5,"operateType":"carStandby","params":{"standbyMins":${cdata}},"version":"1.0"}/
  if (state.EFmodel == "deltapro") tempPayload = / {"from":"Android","id":"194911444","moduleType":0,"operateType":"TCP","params":{"standByMins":0,"id":0},"version":"1.0"}/
  if (state.EFmodel == "river") tempPayload    = / {"from":"Android","id":"194911444","moduleType":0,"operateType":"TCP","params":{"standByMins":0,"id":0},"version":"1.0"}/  
  RunRequest (tempPayload)
  }

def LEDControlBits0123(cdata) {
  if (cdata >3 ) cdata = 0
  if (state.EFmodel == "river") { 
    tempPayload =    /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 35,"state": ${cdata}},"version": "1.0"}/
    RunRequest (tempPayload)
  }else{
  log.info "LED control not supported due to model selection"
  }
}

def RunRequest (tempPayload )  {
  ptopic = "/app/" + state.mqttclientname + "/" + state.serial + "/thing/property/set"
  log.info state.serial + " requested state change - sending MQTT command " + tempPayload 
  state.skipEnMon = 1
  getParent().ParentRun( ptopic , tempPayload  )
  
}

def ResetEnergyCounts (trigger) {
   if (trigger == 1) {
     def date = new Date()
     log.info "watts clears"  
     state.engmondate = date
     state.ACinWattMin   = 0
     state.ACoutWattMin  = 0 
     state.DCinWattMin   = 0 
     state.DCoutWattMin  = 0 
     state.ACinWattHrY   = 0
     state.ACoutWattHrY  = 0 
     state.DCinWattHrY   = 0 
     state.DCoutWattHrY  = 0 
     state.ACinWattHrRw  = 0 
     state.ACoutWattHrRw = 0
     state.DCinWattHrRw  = 0 
     state.DCoutWattHrRw = 0
     state.ACinWattHrRm  = 0
     state.ACoutWattHrRm = 0 
     state.DCinWattHrRm  = 0 
     state.DCoutWattHrRm = 0  
     state.ACinWattHrM   = 0
     state.ACoutWattHrM  = 0 
     state.DCinWattHrM   = 0 
     state.DCoutWattHrM  = 0 
     state.DCoutWattHrM  = 0 
     state.ACinWattHrYt  = 0
     state.ACoutWattHrYt = 0
     state.DCinWattHrYt  = 0
     state.DCoutWattHrYt = 0
     log.info "Energy Counters Reset"
     trigger = 0 
     EnergyCounter()
   }else{
     log.info "send value of 1 to reset energy counters"
   }
}

def EnergyCounter() {
  //if (EnergyCalculator) {
  def date = new Date()
  def dayow = date[Calendar.DAY_OF_WEEK]
  def domonth = date[Calendar.DAY_OF_MONTH]
  //log.info "Energy Monitor Update" 
  if (state.ACinWattMin   == null)   state.ACinWattMin   = 0
  if (state.ACoutWattMin  == null)   state.ACoutWattMin  = 0 
  if (state.DCinWattMin   == null)   state.DCinWattMin   = 0 
  if (state.DCoutWattMin  == null )  state.DCoutWattMin  = 0 
  if (state.ACinWattHrRw  == null )  state.ACinWattHrRw  = 0 
  if (state.ACoutWattHrRw == null )  state.ACoutWattHrRw = 0
  if (state.DCinWattHrRw  == null )  state.DCinWattHrRw  = 0 
  if (state.DCoutWattHrRw == null )  state.DCoutWattHrRw = 0
  if (state.ACinWattHrRm  == null )  state.ACinWattHrRm  = 0
  if (state.ACoutWattHrRm == null )  state.ACoutWattHrRm = 0 
  if (state.DCinWattHrRm  == null )  state.DCinWattHrRm  = 0 
  if (state.DCoutWattHrRm == null )  state.DCoutWattHrRm = 0  
  if (state.ACinWattHrW   == null )  state.ACinWattHrW   = 0
  if (state.ACoutWattHrW  == null )  state.ACoutWattHrW  = 0 
  if (state.DCinWattHrW   == null )  state.DCinWattHrW   = 0 
  if (state.DCoutWattHrW  == null )  state.DCoutWattHrW  = 0
  if (state.ACinWattHrY   == null )  state.ACinWattHrY   = 0
  if (state.ACoutWattHrY  == null )  state.ACoutWattHrY  = 0 
  if (state.DCintWattHrY  == null )  state.DCinWattHrY   = 0
  if (state.DCoutWattHrY  == null )  state.DCoutWattHrY  = 0
  if (state.ACinWattHrM   == null )  state.ACinWattHrM   = 0
  if (state.ACoutWattHrM  == null )  state.ACoutWattHrM  = 0 
  if (state.DCinWattHrM   == null )  state.DCinWattHrM   = 0
  if (state.DCoutWattHrM  == null )  state.DCoutWattHrM  = 0 
  if (state.ACinWattHrYt  == null )  state.ACinWattHrYt  = 0
  if (state.ACoutWattHrYt == null )  state.ACoutWattHrYt = 0
  if (state.DCinWattHrYt  == null )  state.DCinWattHrYt  = 0
  if (state.DCoutWattHrYt == null )  state.DCoutWattHrYt = 0 
  ACwattsIn  = device.currentValue( "Watts AC In" )
  ACwattsOut = device.currentValue( "Watts AC Out" ) 
  DCwattsIn  = device.currentValue( "Watts DC In" )
  DCwattsOut = device.currentValue( "Watts DC Out" )
  if (ACwattsIn  == null) ACwattsIn   = 0
  if (ACwattsOut == null) ACwattsOut  = 0
  if (DCwattsIn  == null) DCwattsIn   = 0
  if (DCwattsOut == null) DCwattsOut  = 0
  state.ACinWattMin  = state.ACinWattMin  + ACwattsIn  
  state.ACoutWattMin = state.ACoutWattMin + ACwattsOut
  state.DCinWattMin  = state.DCinWattMin  + DCwattsIn
  state.DCoutWattMin = state.DCoutWattMin + DCwattsOut
  Integer ACinWattHr  = state.ACinWattMin  / 12 
  Integer ACoutWattHr = state.ACoutWattMin / 12 
  Integer DCinWattHr  = state.DCinWattMin  / 12 
  Integer DCoutWattHr = state.DCoutWattMin / 12 
  state.ACinWattHrRw  = state.ACinWattHrRw  + ACwattsIn  / 12 
  state.ACoutWattHrRw = state.ACoutWattHrRw + ACwattsOut / 12 
  state.DCinWattHrRw  = state.DCinWattHrRw  + DCwattsIn  / 12 
  state.DCoutWattHrRw = state.DCoutWattHrRw + DCwattsOut / 12 
  state.ACinWattHrRm  = state.ACinWattHrRm  + ACwattsIn  / 12 
  state.ACoutWattHrRm = state.ACoutWattHrRm + ACwattsOut / 12 
  state.DCinWattHrRm  = state.DCinWattHrRm  + DCwattsIn  / 12 
  state.DCoutWattHrRm = state.DCoutWattHrRm + DCwattsOut / 12
  state.ACinWattHrYt  = state.ACinWattHrYt  + ACwattsIn  / 12 
  state.ACoutWattHrYt = state.ACoutWattHrYt + ACwattsOut / 12 
  state.DCinWattHrYt  = state.DCinWattHrYt  + DCwattsIn  / 12 
  state.DCoutWattHrYt = state.DCoutWattHrYt + DCwattsOut / 12 
  if (state.ttday == null ) state.ttday = dayow
  if (state.ttday != dayow) {
    state.ACinWattHrY  = ACinWattHr
    state.ACoutWattHrY = ACoutWattHr
    state.DCinWattHrY  = DCinWattHr
    state.DCoutWattHrY = DCoutWattHr
    state.ACinWattMin  = 0
    state.ACoutWattMin = 0
    state.DCinWattMin  = 0
    state.DCoutWattMin = 0
    ACinWattHr  = 0
    ACoutWattHr = 0
    DCinWattHr  = 0
    DCoutWattHr = 0
    state.ttday = dayow
  }  
  if (dayow == 1) {
     if (state.wday == 0) {
        state.ACinWattHrW   = state.ACinWattHrRw 
        state.ACoutWattHrW  = state.ACoutWattHrRw 
        state.DCinWattHrW   = state.DCinWattHrRw 
        state.DCoutWattHrW  = state.DCoutWattHrRw 
        state.ACinWattHrRw  = 0
        state.ACoutWattHrRw = 0
        state.DCinWattHrRw  = 0
        state.DCoutWattHrRw = 0
        state.wday = 1
     }
  } else {
   state.wday = 0
   }
  if (state.newmonth == null ) state.newmonth = domonth
  if (domonth == 1) {
     if (state.newmonth == 0) {
        state.ACinWattHrM   = state.ACinWattHrRm 
        state.ACoutWattHrM  = state.ACoutWattHrRm 
        state.DCinWattHrM   = state.DCinWattHrRm 
        state.DCoutWattHrM  = state.DCoutWattHrRm 
        state.ACinWattHrRm  = 0
        state.ACoutWattHrRm = 0
        state.DCinWattHrRm  = 0
        state.DCoutWattHrRm = 0
        state.newmonth = 1
     }
  } else {
   state.newmonth = 0
  } 
  ProcessEvent( "Energy AC in Total"  , (state.ACinWattHrYt  as int), "WHr", true )
  ProcessEvent( "Energy AC out Total" , (state.ACoutWattHrYt as int), "WHr", true )
  ProcessEvent( "Energy DC in Total"  , (state.DCinWattHrYt  as int), "WHr", true )
  ProcessEvent( "Energy DC out Total" , (state.DCoutWattHrYt as int), "WHr", true )
  if (state.engmondate != state.englastreset ) {
     sendEvent(name: "Energy Reset Timestamp", value: state.engmondate, isStateChanged: true )  
     state.englastreset = state.engmondate
  }
  val1 = "<pre><strong>Energy Monitor WattHrs</strong><br>"
  val2 = "<table><tr><th>Period</th><th>ACin</th><th>ACout</th><th>DCin</th><th>DCout</th></tr>"
  val3 = "<td>Today</td><td>${ACinWattHr}</td><td>${ACoutWattHr}</td><td>${DCinWattHr}</td><td>${DCoutWattHr}</td></tr>"
  val4 = "<td>Yesterday</td><td>${(state.ACinWattHrY as int)}</td><td>${(state.ACoutWattHrY as int)}</td><td>${(state.DCinWattHrY as int)}</td><td>${(state.DCoutWattHrY as int)}</td></tr>"
  val5 = "<td>This Week</td><td>${(state.ACinWattHrRw as int)}</td><td>${(state.ACoutWattHrRw as int)}</td><td>${(state.DCinWattHrRw as int)}</td><td>${(state.DCoutWattHrRw as int)}</td></tr>"
  val6 = "<td>Last Week</td><td>${(state.ACinWattHrW as int)}</td><td>${(state.ACoutWattHrW as int)}</td><td>${(state.DCinWattHrW as int)}</td><td>${(state.DCoutWattHrW as int)}</td></tr>"
  val7 = "<td>This Month</td><td>${(state.ACinWattHrRm as int)}</td><td>${(state.ACoutWattHrRm as int)}</td><td>${(state.DCinWattHrRm as int)}</td><td>${(state.DCoutWattHrRm as int)}</td></tr>"
  val8 = "<td>Last Month</td><td>${(state.ACinWattHrM as int)}</td><td>${(state.ACoutWattHrM as int)}</td><td>${(state.DCinWattHrM as int)}</td><td>${(state.DCoutWattHrM as int)}</td></tr>"
  val9 = "<td>Total</td><td>${(state.ACinWattHrYt as int)}</td><td>${(state.ACoutWattHrYt as int)}</td><td>${(state.DCinWattHrYt as int)}</td><td>${(state.DCoutWattHrYt as int)}</td></tr></table>"
  valall = val1 + val2 + val3 + val4 + val5 + val6+ val7 + val8 + val9
  //log.info "valall=" + valall
 if( device.currentValue( "htmlTile2" ) != valall ) {
     sendEvent( name: "htmlTile2", value: valall )
  }
 }

